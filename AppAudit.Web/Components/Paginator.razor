@typeparam TItem

<div class="flex flex-wrap items-center justify-between gap-3 py-2">
    <div class="flex items-center gap-3 text-sm">
        <span class="text-gray-300">Na stronę:</span>
        <select value="@PageSize" @onchange="OnSizeChanged"
                class="bg-gray-800 border border-gray-700 text-gray-200 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-gray-600">
            @foreach (var opt in PageSizeOptions ?? new[] { 10, 25, 50, 100 })
            {
                <option value="@opt">@opt</option>
            }
        </select>
        <span class="text-gray-400">• @TotalItems elementów</span>
    </div>

    <div class="flex items-center gap-1.5">
        <button @onclick="Prev" disabled="@(_pageIndex <= 1)"
                class="inline-flex items-center justify-center h-8 min-w-8 px-2 rounded-md border border-gray-700 bg-gray-800 text-gray-200 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-600 disabled:opacity-50 disabled:cursor-not-allowed">
            «
        </button>

        @if (_totalPages > 1)
        {
            var window = Window(_pageIndex, _totalPages, 2);
            int start = window.start;
            int end = window.end;

            if (start > 1)
            {
                var pageNum = 1;
                <button class="@GetBtnClass(pageNum)" @onclick="() => Jump(pageNum)">1</button>
                if (start > 2)
                {
                    <span class="px-1 text-gray-400">…</span>
                }
            }

            for (int i = start; i <= end; i++)
            {
                var pageNum = i;
                <button class="@GetBtnClass(pageNum)" @onclick="() => Jump(pageNum)">@pageNum</button>
            }

            if (end < _totalPages)
            {
                if (end < _totalPages - 1)
                {
                    <span class="px-1 text-gray-400">…</span>
                }
                var pageNum = _totalPages;
                <button class="@GetBtnClass(pageNum)" @onclick="() => Jump(pageNum)">@pageNum</button>
            }
        }

        <button @onclick="Next" disabled="@(_pageIndex >= _totalPages)"
                class="inline-flex items-center justify-center h-8 min-w-8 px-2 rounded-md border border-gray-700 bg-gray-800 text-gray-200 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-600 disabled:opacity-50 disabled:cursor-not-allowed">
            »
        </button>
    </div>
</div>

@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 25;
    [Parameter] public int PageIndex { get; set; } = 1;
    [Parameter] public int[]? PageSizeOptions { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }

    int _pageIndex;
    int _totalPages;

    const string BtnBase = "inline-flex items-center justify-center h-8 min-w-8 px-2 rounded-md border border-gray-700 bg-gray-800 text-gray-200 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-600 disabled:opacity-50 disabled:cursor-not-allowed";
    const string BtnActive = " bg-blue-600 border-blue-600 text-white hover:bg-blue-600";

    protected override void OnParametersSet()
    {
        _pageIndex = Math.Max(1, PageIndex);
        _totalPages = Math.Max(1, (int)Math.Ceiling(TotalItems / (double)Math.Max(1, PageSize)));
        if (_pageIndex > _totalPages) _pageIndex = _totalPages;
    }

    string GetBtnClass(int i) => i == _pageIndex ? BtnBase + BtnActive : BtnBase;

    static (int start, int end) Window(int current, int total, int radius)
    {
        var start = Math.Max(1, current - radius);
        var end = Math.Min(total, current + radius);
        if (end - start < radius * 2) end = Math.Min(total, start + radius * 2);
        if (end - start < radius * 2) start = Math.Max(1, end - radius * 2);
        return (start, end);
    }

    async Task Jump(int i)
    {
        if (i == _pageIndex) return;
        _pageIndex = i;
        await OnPageChanged.InvokeAsync(_pageIndex);
    }

    async Task Prev() => await Jump(Math.Max(1, _pageIndex - 1));
    async Task Next() => await Jump(Math.Min(_totalPages, _pageIndex + 1));

    async Task OnSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var size) && size > 0)
        {
            await OnPageSizeChanged.InvokeAsync(size);
        }
    }
}
