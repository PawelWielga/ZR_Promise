@page "/licenses"
@inject IMediator Mediator

<div class="mb-4 flex items-center justify-between">
    <h1 class="text-lg font-semibold">Wymagające licencji</h1>
</div>

@if (_loading)
{
    <div class="rounded-md border border-gray-800 bg-gray-900/60 px-4 py-3 text-sm text-gray-300">Ładowanie…</div>
}
else if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="rounded-md border border-red-800/50 bg-red-900/30 px-4 py-3 text-sm text-red-200">@_error</div>
}
else if (_items.Count == 0)
{
    <div class="rounded-md border border-gray-800 bg-gray-900/60 px-4 py-6 text-center text-sm text-gray-400">Brak pozycji wymagających licencji bez klucza.</div>
}
else
{
    <div class="overflow-x-auto rounded-xl border border-gray-800 bg-gray-900/40">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-800/60">
                <tr class="text-left text-xs font-semibold uppercase tracking-wide text-gray-300">
                    <th class="px-4 py-3">Nazwa</th>
                    <th class="px-4 py-3">Wersja</th>
                    <th class="px-4 py-3">Wydawca</th>
                    <th class="px-4 py-3">Klucz licencji</th>
                    <th class="px-4 py-3"></th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-800 text-sm">
                @foreach (var p in _items)
                {
                    <tr class="hover:bg-gray-800/40">
                        <td class="px-4 py-2 align-middle">@p.Name</td>
                        <td class="px-4 py-2 align-middle">@p.Version</td>
                        <td class="px-4 py-2 align-middle">@p.Publisher</td>
                        <td class="px-4 py-2 align-middle">
                            <input type="text"
                                   @bind="_edit[p.ProgramId]"
                                   placeholder="Wpisz klucz…"
                                   class="w-full rounded-md border border-gray-700 bg-gray-800 px-3 py-2 text-sm text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-600" />
                        </td>
                        <td class="px-4 py-2 align-middle">
                            <button @onclick="() => Save(p.ProgramId)"
                                    class="inline-flex items-center gap-2 rounded-md border border-gray-700 bg-gray-800 px-3 py-2 text-sm text-gray-100 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-600">
                                Zapisz
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    bool _loading = true;
    string? _error;
    List<ProgramRecord> _items = new();
    Dictionary<Guid, string?> _edit = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var page = await Mediator.Send(new GetProgramsPageQuery(Page: 1, PageSize: 500, Search: null, RequiresOnly: true));
            _items = page.Items.Where(x => string.IsNullOrWhiteSpace(x.LicenseKey)).OrderBy(x => x.Name).ToList();
            foreach (var i in _items) _edit[i.ProgramId] = i.LicenseKey ?? "";
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _loading = false; }
    }

    async Task Save(Guid id)
    {
        try
        {
            var key = _edit.TryGetValue(id, out var v) ? v : null;
            await Mediator.Send(new SetLicenseKeyCommand(id, key));
            var idx = _items.FindIndex(x => x.ProgramId == id);
            if (idx >= 0) _items[idx] = _items[idx] with { LicenseKey = key };
        }
        catch (Exception ex) { _error = ex.Message; }
    }
}
