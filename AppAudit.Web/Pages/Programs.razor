@page "/programs"
@implements IDisposable
@inject IMediator Mediator

<div class="mb-4 flex flex-wrap items-center justify-between gap-3">
    <h1 class="text-lg font-semibold">Programy</h1>
    <input type="text"
           placeholder="Szukaj nazwy/wydawcy…"
           value="@_search"
           @oninput="OnSearchInput"
           class="w-full sm:w-[420px] rounded-md border border-gray-700 bg-gray-800 px-3 py-2 text-sm text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-600" />
</div>

@if (_loading)
{
    <div class="rounded-md border border-gray-800 bg-gray-900/60 px-4 py-3 text-sm text-gray-300">Ładowanie…</div>
}
else if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="rounded-md border border-red-800/50 bg-red-900/30 px-4 py-3 text-sm text-red-200">@_error</div>
}
else if (_items.Count == 0)
{
    <div class="rounded-md border border-gray-800 bg-gray-900/60 px-4 py-6 text-center text-sm text-gray-400">Brak danych.</div>
}
else
{
    <Paginator TItem="ProgramRecord"
               TotalItems="@_total"
               PageSize="@_pageSize"
               PageIndex="@_pageIndex"
               PageSizeOptions="new[] {10,25,50,100}"
               OnPageChanged="OnPageChanged"
               OnPageSizeChanged="OnPageSizeChanged" />

    <div class="mt-3 overflow-x-auto rounded-xl border border-gray-800 bg-gray-900/40">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-800/60">
                <tr class="text-left text-xs font-semibold uppercase tracking-wide text-gray-300">
                    <th class="px-4 py-3">Nazwa</th>
                    <th class="px-4 py-3">Wersja</th>
                    <th class="px-4 py-3">Wydawca</th>
                    <th class="px-4 py-3">Wymaga licencji</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-800 text-sm">
                @foreach (var p in _items)
                {
                    <tr class="hover:bg-gray-800/40">
                        <td class="px-4 py-2 align-middle">@p.Name</td>
                        <td class="px-4 py-2 align-middle">@p.Version</td>
                        <td class="px-4 py-2 align-middle">@p.Publisher</td>
                        <td class="px-4 py-2 align-middle">
                            <input type="checkbox"
                                   class="h-4 w-4 accent-blue-600"
                                   checked="@p.RequiresLicense"
                                   disabled="@(!string.IsNullOrWhiteSpace(p.LicenseKey))"
                                   title="@(!string.IsNullOrWhiteSpace(p.LicenseKey) ? "Najpierw usuń klucz licencji." : null)"
                                   @onchange="async e => await Toggle(p.ProgramId, ((bool?)e.Value) ?? false)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <Paginator TItem="ProgramRecord"
               TotalItems="@_total"
               PageSize="@_pageSize"
               PageIndex="@_pageIndex"
               PageSizeOptions="new[] {10,25,50,100}"
               OnPageChanged="OnPageChanged"
               OnPageSizeChanged="OnPageSizeChanged" />
}

@code {
    bool _loading = true;
    string? _error;
    List<ProgramRecord> _items = new();
    int _total;
    int _pageSize = 25;
    int _pageIndex = 1;
    string _search = "";
    System.Timers.Timer? _debounce;

    protected override async Task OnInitializedAsync() => await Load();

    async Task Load()
    {
        try
        {
            _loading = true;
            var search = string.IsNullOrWhiteSpace(_search) ? null : _search;
            var res = await Mediator.Send(new GetProgramsPageQuery(_pageIndex, _pageSize, search));
            _items = res.Items.ToList();
            _total = res.Total;
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _loading = false; StateHasChanged(); }
    }

    async Task Toggle(Guid id, bool requires)
    {
        try
        {
            await Mediator.Send(new SetRequiresLicenseCommand(id, requires));
            var idx = _items.FindIndex(x => x.ProgramId == id);
            if (idx >= 0) _items[idx] = _items[idx] with { RequiresLicense = requires };
            StateHasChanged();
        }
        catch (Exception ex) { _error = ex.Message; }
    }

    async Task OnPageChanged(int page)
    {
        _pageIndex = page;
        await Load();
    }

    async Task OnPageSizeChanged(int size)
    {
        _pageSize = size;
        _pageIndex = 1;
        await Load();
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        _search = e.Value?.ToString() ?? "";
        _debounce?.Stop();
        _debounce ??= new System.Timers.Timer(400) { AutoReset = false };
        _debounce.Elapsed += async (_, __) => await InvokeAsync(async () => { _pageIndex = 1; await Load(); });
        _debounce.Start();
    }

    public void Dispose() => _debounce?.Dispose();
}
